/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface AccountTreeContract
  extends Truffle.Contract<AccountTreeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccountTreeInstance>;
}

export interface BatchContract extends Truffle.Contract<BatchInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BatchInstance>;
}

export interface BLSAccountRegistryContract
  extends Truffle.Contract<BLSAccountRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BLSAccountRegistryInstance>;
}

export interface DepositManagerContract
  extends Truffle.Contract<DepositManagerInstance> {
  "new"(
    _tokenRegistry: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DepositManagerInstance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(
    name: string,
    symbol: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20Instance>;
}

export interface FraudProofContract
  extends Truffle.Contract<FraudProofInstance> {
  "new"(
    _accountRegistry: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<FraudProofInstance>;
}

export interface FraudProofTreeUtilsContract
  extends Truffle.Contract<FraudProofTreeUtilsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<FraudProofTreeUtilsInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MockFraudProofContract
  extends Truffle.Contract<MockFraudProofInstance> {
  "new"(
    _accountRegistry: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<MockFraudProofInstance>;
}

export interface MockRollupContract
  extends Truffle.Contract<MockRollupInstance> {
  "new"(
    _stakeAmount: number | BigNumber | string,
    _disputePeriod: number | BigNumber | string,
    _fraudProof: string | BigNumber,
    _tokenRegistry: string | BigNumber,
    genesisState: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<MockRollupInstance>;
}

export interface MockTokenContract extends Truffle.Contract<MockTokenInstance> {
  "new"(
    accounts: (string | BigNumber)[],
    amounts: (number | BigNumber | string)[],
    meta?: Truffle.TransactionDetails
  ): Promise<MockTokenInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface RollupContract extends Truffle.Contract<RollupInstance> {
  "new"(
    _stakeAmount: number | BigNumber | string,
    _disputePeriod: number | BigNumber | string,
    _fraudProof: string | BigNumber,
    _tokenRegistry: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<RollupInstance>;
}

export interface RollupTreeContract
  extends Truffle.Contract<RollupTreeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RollupTreeInstance>;
}

export interface StakeManagerContract
  extends Truffle.Contract<StakeManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StakeManagerInstance>;
}

export interface StateAccountContract
  extends Truffle.Contract<StateAccountInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StateAccountInstance>;
}

export interface TestAccountTreeContract
  extends Truffle.Contract<TestAccountTreeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestAccountTreeInstance>;
}

export interface TestBLSContract extends Truffle.Contract<TestBLSInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestBLSInstance>;
}

export interface TestBytesContract extends Truffle.Contract<TestBytesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestBytesInstance>;
}

export interface TestFraudProofTreeUtilsContract
  extends Truffle.Contract<TestFraudProofTreeUtilsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestFraudProofTreeUtilsInstance>;
}

export interface TestStateAccountContract
  extends Truffle.Contract<TestStateAccountInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestStateAccountInstance>;
}

export interface TestTxContract extends Truffle.Contract<TestTxInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestTxInstance>;
}

export interface TokenRegistryContract
  extends Truffle.Contract<TokenRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenRegistryInstance>;
}

export interface TxContract extends Truffle.Contract<TxInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TxInstance>;
}

export interface WithdrawContract extends Truffle.Contract<WithdrawInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WithdrawInstance>;
}

export interface AccountTreeInstance extends Truffle.ContractInstance {
  BATCH_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SET_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  WITNESS_LENGTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  filledSubtreesLeft(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesRight(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  leafIndexLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  leafIndexRight(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootLeft(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootRight(txDetails?: Truffle.TransactionDetails): Promise<string>;

  zeros(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface BatchInstance extends Truffle.ContractInstance {
  BATCH_TYPE_0_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_TYPE_1_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_TYPE_2_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_TYPE_3_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface BLSAccountRegistryInstance extends Truffle.ContractInstance {
  BATCH_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SET_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  WITNESS_LENGTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  filledSubtreesLeft(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesRight(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  leafIndexLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  leafIndexRight(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootLeft(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootRight(txDetails?: Truffle.TransactionDetails): Promise<string>;

  zeros(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  register: {
    (
      pubkey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      pubkey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      pubkey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pubkey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerBatch: {
    (
      pubkeys: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      pubkeys: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      pubkeys: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pubkeys: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exists(
    accountIndex: number | BigNumber | string,
    pubkey: (number | BigNumber | string)[],
    witness: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface DepositManagerInstance extends Truffle.ContractInstance {
  QUE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  depositPointer(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  depositQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, boolean, boolean]>;

  filledSubtreesNewAccounts(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesTopUps(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  queIndex(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  submittedQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  depositWithNewAccount: {
    (
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20Instance extends Truffle.ContractInstance {
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FraudProofInstance extends Truffle.ContractInstance {
  ACCOUNT_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  STATE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  STATE_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  accountRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  verifyWithdrawRequest(
    proof: {
      stateAccount: number | BigNumber | string;
      stateWitness: (string | BigNumber)[];
      pubkey: (number | BigNumber | string)[];
      accountWitness: (string | BigNumber)[];
      _tx: number | BigNumber | string;
      txWitness: (string | BigNumber)[];
    },
    stateRoot: string | BigNumber,
    txRoot: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType0(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidSignatureBatchType0(
    signature: (number | BigNumber | string)[],
    proof: {
      pubkeys: (number | BigNumber | string)[][];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType0(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      senderAccounts: (number | BigNumber | string)[];
      receiverAccounts: (number | BigNumber | string)[];
      senderWitnesses: (string | BigNumber)[][];
      receiverWitnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType1(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidDepositRootBatchType1(
    depositRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType1(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      accounts: (number | BigNumber | string)[];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidDepositRootBatchType2(
    depositRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType2(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      accounts: (number | BigNumber | string)[];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType3(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidSignatureBatchType3(
    signature: (number | BigNumber | string)[],
    proof: {
      pubkeys: (number | BigNumber | string)[][];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType3(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      senderAccounts: (number | BigNumber | string)[];
      receiverAccounts: (number | BigNumber | string)[];
      senderWitnesses: (string | BigNumber)[][];
      receiverWitnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface FraudProofTreeUtilsInstance extends Truffle.ContractInstance {
  ACCOUNT_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  STATE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  STATE_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MockFraudProofInstance extends Truffle.ContractInstance {
  ACCOUNT_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  STATE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  STATE_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  accountRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  shouldRollbackInvalidDepositRootBatchType1(
    depositRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidDepositRootBatchType2(
    depositRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidSignatureBatchType0(
    signature: (number | BigNumber | string)[],
    proof: {
      pubkeys: (number | BigNumber | string)[][];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidSignatureBatchType3(
    signature: (number | BigNumber | string)[],
    proof: {
      pubkeys: (number | BigNumber | string)[][];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType0(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      senderAccounts: (number | BigNumber | string)[];
      receiverAccounts: (number | BigNumber | string)[];
      senderWitnesses: (string | BigNumber)[][];
      receiverWitnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType1(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      accounts: (number | BigNumber | string)[];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType2(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      accounts: (number | BigNumber | string)[];
      witnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTransitionBatchType3(
    s0: string | BigNumber,
    s1: string | BigNumber,
    proof: {
      senderAccounts: (number | BigNumber | string)[];
      receiverAccounts: (number | BigNumber | string)[];
      senderWitnesses: (string | BigNumber)[][];
      receiverWitnesses: (string | BigNumber)[][];
    },
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType0(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType1(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldRollbackInvalidTxRootBatchType3(
    txRoot: string | BigNumber,
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  verifyWithdrawRequest(
    proof: {
      stateAccount: number | BigNumber | string;
      stateWitness: (string | BigNumber)[];
      pubkey: (number | BigNumber | string)[];
      accountWitness: (string | BigNumber)[];
      _tx: number | BigNumber | string;
      txWitness: (string | BigNumber)[];
    },
    stateRoot: string | BigNumber,
    txRoot: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  txCommit(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  txRoot0(txs: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  txRoot1(txs: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  depositRoot1(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  depositRoot2(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  txRoot3(txs: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MockRollupInstance extends Truffle.ContractInstance {
  MAX_TXS_PER_BATCH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  batchPointer(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  batches(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  deposit: {
    (
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPointer(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  depositQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, boolean, boolean]>;

  depositWithNewAccount: {
    (
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  disputePeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  filledSubtreesNewAccounts(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesTopUps(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  fraudInvalidSignatureBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidSignatureBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType1: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType1: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  invalidBatchIndex(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isRollingBack(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  queIndex(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stakeAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stakes(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  submitBatchType0: {
    (
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType1: {
    (
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType2: {
    (
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType3: {
    (
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submittedQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdraw: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake0: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake1: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake2: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake3: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _rollback: {
    (
      _invalidBatchIndex: number | BigNumber | string,
      challenger: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _invalidBatchIndex: number | BigNumber | string,
      challenger: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _invalidBatchIndex: number | BigNumber | string,
      challenger: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _invalidBatchIndex: number | BigNumber | string,
      challenger: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _addTestQue: {
    (root: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _submitTestBatchWithDeposits: {
    (
      batchID: string | BigNumber,
      newState: string | BigNumber,
      queID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      queID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      queID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      queID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _submitTestBatch: {
    (
      batchID: string | BigNumber,
      newState: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      batchID: string | BigNumber,
      newState: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  idType0(
    header: {
      state: string | BigNumber;
      coordinator: string | BigNumber;
      blockNumber: number | BigNumber | string;
      batchIndex: number | BigNumber | string;
      signature: (number | BigNumber | string)[];
      txRoot: string | BigNumber;
      txCommit: string | BigNumber;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  idType1(
    header: {
      state: string | BigNumber;
      coordinator: string | BigNumber;
      blockNumber: number | BigNumber | string;
      batchIndex: number | BigNumber | string;
      queID: number | BigNumber | string;
      txRoot: string | BigNumber;
      txCommit: string | BigNumber;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  idType2(
    header: {
      state: string | BigNumber;
      coordinator: string | BigNumber;
      blockNumber: number | BigNumber | string;
      batchIndex: number | BigNumber | string;
      queID: number | BigNumber | string;
      txCommit: string | BigNumber;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  idType3(
    header: {
      state: string | BigNumber;
      coordinator: string | BigNumber;
      blockNumber: number | BigNumber | string;
      batchIndex: number | BigNumber | string;
      signature: (number | BigNumber | string)[];
      txRoot: string | BigNumber;
      txCommit: string | BigNumber;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface MockTokenInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RollupInstance extends Truffle.ContractInstance {
  MAX_TXS_PER_BATCH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  batchPointer(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  batches(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  deposit: {
    (
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPointer(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  depositQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, boolean, boolean]>;

  depositWithNewAccount: {
    (
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accountID: number | BigNumber | string,
      tokenID: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  disputePeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  filledSubtreesNewAccounts(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesTopUps(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  invalidBatchIndex(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isRollingBack(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  queIndex(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stakeAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stakes(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  submittedQues(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdraw: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      },
      proof: {
        stateAccount: number | BigNumber | string;
        stateWitness: (string | BigNumber)[];
        pubkey: (number | BigNumber | string)[];
        accountWitness: (string | BigNumber)[];
        _tx: number | BigNumber | string;
        txWitness: (string | BigNumber)[];
      },
      signature: (number | BigNumber | string)[],
      beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType0: {
    (
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType1: {
    (
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txRoot: string | BigNumber,
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType2: {
    (
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      queID: number | BigNumber | string,
      newState: string | BigNumber,
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitBatchType3: {
    (
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txRoot: string | BigNumber,
      newState: string | BigNumber,
      signature: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidSignatureBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType0: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType1: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType1: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
      },
      proof: {
        accounts: (number | BigNumber | string)[];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTxRootBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidSignatureBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        pubkeys: (number | BigNumber | string)[][];
        witnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fraudInvalidTransitionBatchType3: {
    (
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      header: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
      },
      proof: {
        senderAccounts: (number | BigNumber | string)[];
        receiverAccounts: (number | BigNumber | string)[];
        senderWitnesses: (string | BigNumber)[][];
        receiverWitnesses: (string | BigNumber)[][];
      },
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake0: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake1: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake2: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        queID: number | BigNumber | string;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake3: {
    (
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      headers: {
        state: string | BigNumber;
        coordinator: string | BigNumber;
        blockNumber: number | BigNumber | string;
        batchIndex: number | BigNumber | string;
        signature: (number | BigNumber | string)[];
        txRoot: string | BigNumber;
        txCommit: string | BigNumber;
      }[],
      beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RollupTreeInstance extends Truffle.ContractInstance {
  QUE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  QUE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  STATE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesNewAccounts(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesTopUps(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface StakeManagerInstance extends Truffle.ContractInstance {
  stakeAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stakes(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface StateAccountInstance extends Truffle.ContractInstance {
  ACCOUNT_LEN(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  ACCOUNT_OFF(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  EMPTY_ACCOUNT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_ACCOUNT_INDEX(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  MASK_BALANCE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_BALANCE_IN_PLACE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  MASK_NONCE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_NONCE_IN_PLACE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  MASK_TOKEN_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_ACCOUNT_INDEX(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_BALANCE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_NONCE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_TOKEN_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface TestAccountTreeInstance extends Truffle.ContractInstance {
  BATCH_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  BATCH_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SET_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  WITNESS_LENGTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  filledSubtreesLeft(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  filledSubtreesRight(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  leafIndexLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  leafIndexRight(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootLeft(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rootRight(txDetails?: Truffle.TransactionDetails): Promise<string>;

  zeros(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  updateSingle: {
    (leaf: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      leaf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      leaf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      leaf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateBatch: {
    (
      leafs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      leafs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      leafs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      leafs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkInclusion: {
    (
      leaf: string | BigNumber,
      leafIndex: number | BigNumber | string,
      witness: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      leaf: string | BigNumber,
      leafIndex: number | BigNumber | string,
      witness: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, boolean]>;
    sendTransaction(
      leaf: string | BigNumber,
      leafIndex: number | BigNumber | string,
      witness: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      leaf: string | BigNumber,
      leafIndex: number | BigNumber | string,
      witness: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestBLSInstance extends Truffle.ContractInstance {
  verifyMultiple(
    signature: (number | BigNumber | string)[],
    pubkeys: (number | BigNumber | string)[][],
    messages: (number | BigNumber | string)[][],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyMultipleGasCost: {
    (
      signature: (number | BigNumber | string)[],
      pubkeys: (number | BigNumber | string)[][],
      messages: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      signature: (number | BigNumber | string)[],
      pubkeys: (number | BigNumber | string)[][],
      messages: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      signature: (number | BigNumber | string)[],
      pubkeys: (number | BigNumber | string)[][],
      messages: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      signature: (number | BigNumber | string)[],
      pubkeys: (number | BigNumber | string)[][],
      messages: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  verifySingle(
    signature: (number | BigNumber | string)[],
    pubkey: (number | BigNumber | string)[],
    message: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifySingleeGasCost: {
    (
      signature: (number | BigNumber | string)[],
      pubkey: (number | BigNumber | string)[],
      message: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      signature: (number | BigNumber | string)[],
      pubkey: (number | BigNumber | string)[],
      message: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      signature: (number | BigNumber | string)[],
      pubkey: (number | BigNumber | string)[],
      message: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      signature: (number | BigNumber | string)[],
      pubkey: (number | BigNumber | string)[],
      message: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hashToPoint(
    data: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  hashToPointGasCost: {
    (data: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOnCurveG1Compressed(
    point: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOnCurveG1(
    point: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOnCurveG1CompressedGasCost: {
    (
      point: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      point: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      point: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      point: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOnCurveG1GasCost: {
    (
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOnCurveG2Compressed(
    point: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOnCurveG2(
    point: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOnCurveG2CompressedGasCost: {
    (
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOnCurveG2GasCost: {
    (
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      point: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isNonResidueFP(
    e: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isNonResidueFPGasCost: {
    (
      e: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      e: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      e: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      e: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isNonResidueFP2(
    e: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isNonResidueFP2GasCost: {
    (
      e: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      e: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      e: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      e: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pubkeyToUncompresed(
    compressed: (number | BigNumber | string)[],
    y: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  signatureToUncompresed(
    compressed: number | BigNumber | string,
    y: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  isValidCompressedPublicKey(
    compressed: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isValidCompressedSignature(
    compressed: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface TestBytesInstance extends Truffle.ContractInstance {
  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  submit: {
    (
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitStatic: {
    (
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  H1: {
    (
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  H1b: {
    (
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  H2b: {
    (
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  H2: {
    (
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      s: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ph1: {
    (txs: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txs: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ph2: {
    (txs: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txs: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  generateRoot: {
    (
      _txs: string,
      txLen: number | BigNumber | string,
      debug: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _txs: string,
      txLen: number | BigNumber | string,
      debug: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _txs: string,
      txLen: number | BigNumber | string,
      debug: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _txs: string,
      txLen: number | BigNumber | string,
      debug: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestFraudProofTreeUtilsInstance
  extends Truffle.ContractInstance {
  ACCOUNT_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  STATE_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  STATE_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ZEROS(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _checkInclusion(
    root: string | BigNumber,
    index: number | BigNumber | string,
    leaf: string | BigNumber,
    witness: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _checkStateInclusion(
    root: string | BigNumber,
    stateIndex: number | BigNumber | string,
    account: number | BigNumber | string,
    witness: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _updateStateRootWithAccount(
    stateIndex: number | BigNumber | string,
    account: number | BigNumber | string,
    witness: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _updateStateRootWithAccountHash(
    stateIndex: number | BigNumber | string,
    account: string | BigNumber,
    witness: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _calculateRoot(
    buf: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _calculateRootTruncated(
    buf: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestStateAccountInstance extends Truffle.ContractInstance {
  isEmptyAccount(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  accountID(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenID(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balance(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nonce(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  incrementNonce(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, boolean]>;

  balanceSafeAdd(
    account: number | BigNumber | string,
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, boolean]>;

  balanceSafeSub(
    account: number | BigNumber | string,
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, boolean]>;

  hash(
    account: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestTxInstance extends Truffle.ContractInstance {
  t0_fromWord(
    _tx: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string]>;

  t0_amountFromWord(
    _tx: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t0_hasExcessData(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  t0_size(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t0_amountOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t0_senderOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t0_receiverOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t0_hashOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  t0_mapToPoint(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  t1_hasExcessData(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  t1_size(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t1_accountIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t1_tokenIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t1_amountOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t1_stateIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t1_hashOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  t1_depositHashOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  t2_hasExcessData(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  t2_size(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t2_amountOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t2_tokenIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t2_stateIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t2_hashOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  t3_hasExcessData(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  t3_size(
    txs: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t3_amountOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t3_senderOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t3_receiverOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t3_receiverAccountIdOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  t3_hashOf(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  t3_mapToPoint(
    txs: string,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;
}

export interface TokenRegistryInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registered(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, boolean]>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  requestCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  requests(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, boolean]>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  request: {
    (
      token: string | BigNumber,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalize: {
    (
      requestIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      requestIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      requestIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getToken(
    tokenIndex: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ denominator: BigNumber; addr: string; exist: boolean }>;

  getTokenFromRequests(
    requestIndex: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ denominator: BigNumber; addr: string; exist: boolean }>;
}

export interface TxInstance extends Truffle.ContractInstance {
  MASK_ACCOUNT_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_AMOUNT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_STATE_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TOKEN_ID(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TX_0(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TX_1(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TX_2(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TX_3(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MASK_TX_IN_WORD_0(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_ACCOUNT_ID_1(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_AMOUNT_0(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_AMOUNT_1(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_AMOUNT_2(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_AMOUNT_3(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_RECEIVER_0(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_RECEIVER_3(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_RECEIVER_ACCOUNT_ID(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_SENDER_0(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_SENDER_3(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POSITION_STATE_ID_1(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_STATE_ID_2(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_TOKEN_ID_1(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  POSITION_TOKEN_ID_2(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  TX_DEPOSIT_LEN_1(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  TX_LEN_0(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  TX_LEN_1(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  TX_LEN_2(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  TX_LEN_3(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface WithdrawInstance extends Truffle.ContractInstance {
  ACCOUNT_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  STATE_WITNESS_LENGTH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}
